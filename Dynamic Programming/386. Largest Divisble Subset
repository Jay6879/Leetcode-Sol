class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        int[] dp = new int[nums.length];

        Arrays.fill(dp,1);

        int[] backtrack = new int[nums.length];

        for(int i=0;i<backtrack.length;i++){
            backtrack[i] = i;
        }

        for(int i=0;i<nums.length;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0){
                    if(dp[i]<1+dp[j]){
                        backtrack[i] = j;
                        dp[i] = 1+dp[j];
                    }
                }
            }
        }

        int numsIdx = 0;
        int val = 1;
        for(int i=0;i<dp.length;i++){
            if(dp[i]>val){
                val= dp[i];
                numsIdx = i;
            }
        }

        List<Integer> al = new ArrayList<>();

        while(backtrack[numsIdx]!=numsIdx){
            al.add(nums[numsIdx]);
            numsIdx = backtrack[numsIdx];
        }

        al.add(nums[numsIdx]);

        Collections.reverse(al);

        return al;
    }
}
